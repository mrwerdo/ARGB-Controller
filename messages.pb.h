/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _CurrentTime { 
    int64_t timestamp;
} CurrentTime;

typedef struct _DebugMessage { 
    int32_t id;
    char description[64];
} DebugMessage;

typedef struct _Log { 
    int32_t id;
    bool is_error;
} Log;

typedef struct _SetLight { 
    int32_t id;
    int32_t range;
    /* start color */
    int32_t start_color;
    /* end color */
    int32_t end_color;
    /* attack, hold, decay, sustain */
    int64_t ahds;
    /* gradient fields */
    int32_t start_color_alt;
    int32_t end_color_alt;
} SetLight;

typedef struct _StackMeasurement { 
    int32_t id;
    int32_t data;
    int32_t bss;
    int32_t heap;
    int32_t heap_gap;
    int32_t stack;
} StackMeasurement;

typedef struct _Request { 
    pb_size_t which_payload;
    union {
        SetLight set_light;
        bool current_time_request;
    } payload;
} Request;

typedef struct _Response { 
    pb_size_t which_payload;
    union {
        CurrentTime current_time;
        Log log;
        StackMeasurement stack_measurement;
    } payload;
} Response;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SetLight_init_default                    {0, 0, 0, 0, 0, 0, 0}
#define CurrentTime_init_default                 {0}
#define Request_init_default                     {0, {SetLight_init_default}}
#define Log_init_default                         {0, 0}
#define DebugMessage_init_default                {0, ""}
#define StackMeasurement_init_default            {0, 0, 0, 0, 0, 0}
#define Response_init_default                    {0, {CurrentTime_init_default}}
#define SetLight_init_zero                       {0, 0, 0, 0, 0, 0, 0}
#define CurrentTime_init_zero                    {0}
#define Request_init_zero                        {0, {SetLight_init_zero}}
#define Log_init_zero                            {0, 0}
#define DebugMessage_init_zero                   {0, ""}
#define StackMeasurement_init_zero               {0, 0, 0, 0, 0, 0}
#define Response_init_zero                       {0, {CurrentTime_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define CurrentTime_timestamp_tag                1
#define DebugMessage_id_tag                      1
#define DebugMessage_description_tag             2
#define Log_id_tag                               1
#define Log_is_error_tag                         2
#define SetLight_id_tag                          1
#define SetLight_range_tag                       2
#define SetLight_start_color_tag                 3
#define SetLight_end_color_tag                   4
#define SetLight_ahds_tag                        5
#define SetLight_start_color_alt_tag             6
#define SetLight_end_color_alt_tag               7
#define StackMeasurement_id_tag                  1
#define StackMeasurement_data_tag                2
#define StackMeasurement_bss_tag                 3
#define StackMeasurement_heap_tag                4
#define StackMeasurement_heap_gap_tag            5
#define StackMeasurement_stack_tag               6
#define Request_set_light_tag                    1
#define Request_current_time_request_tag         2
#define Response_current_time_tag                1
#define Response_log_tag                         2
#define Response_stack_measurement_tag           3

/* Struct field encoding specification for nanopb */
#define SetLight_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    id,                1) \
X(a, STATIC,   REQUIRED, INT32,    range,             2) \
X(a, STATIC,   REQUIRED, INT32,    start_color,       3) \
X(a, STATIC,   REQUIRED, INT32,    end_color,         4) \
X(a, STATIC,   REQUIRED, INT64,    ahds,              5) \
X(a, STATIC,   REQUIRED, INT32,    start_color_alt,   6) \
X(a, STATIC,   REQUIRED, INT32,    end_color_alt,     7)
#define SetLight_CALLBACK NULL
#define SetLight_DEFAULT NULL

#define CurrentTime_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT64,    timestamp,         1)
#define CurrentTime_CALLBACK NULL
#define CurrentTime_DEFAULT NULL

#define Request_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_light,payload.set_light),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,current_time_request,payload.current_time_request),   2)
#define Request_CALLBACK NULL
#define Request_DEFAULT NULL
#define Request_payload_set_light_MSGTYPE SetLight

#define Log_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    id,                1) \
X(a, STATIC,   REQUIRED, BOOL,     is_error,          2)
#define Log_CALLBACK NULL
#define Log_DEFAULT NULL

#define DebugMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    id,                1) \
X(a, STATIC,   REQUIRED, STRING,   description,       2)
#define DebugMessage_CALLBACK NULL
#define DebugMessage_DEFAULT NULL

#define StackMeasurement_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    id,                1) \
X(a, STATIC,   REQUIRED, INT32,    data,              2) \
X(a, STATIC,   REQUIRED, INT32,    bss,               3) \
X(a, STATIC,   REQUIRED, INT32,    heap,              4) \
X(a, STATIC,   REQUIRED, INT32,    heap_gap,          5) \
X(a, STATIC,   REQUIRED, INT32,    stack,             6)
#define StackMeasurement_CALLBACK NULL
#define StackMeasurement_DEFAULT NULL

#define Response_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,current_time,payload.current_time),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,log,payload.log),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,stack_measurement,payload.stack_measurement),   3)
#define Response_CALLBACK NULL
#define Response_DEFAULT NULL
#define Response_payload_current_time_MSGTYPE CurrentTime
#define Response_payload_log_MSGTYPE Log
#define Response_payload_stack_measurement_MSGTYPE StackMeasurement

extern const pb_msgdesc_t SetLight_msg;
extern const pb_msgdesc_t CurrentTime_msg;
extern const pb_msgdesc_t Request_msg;
extern const pb_msgdesc_t Log_msg;
extern const pb_msgdesc_t DebugMessage_msg;
extern const pb_msgdesc_t StackMeasurement_msg;
extern const pb_msgdesc_t Response_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SetLight_fields &SetLight_msg
#define CurrentTime_fields &CurrentTime_msg
#define Request_fields &Request_msg
#define Log_fields &Log_msg
#define DebugMessage_fields &DebugMessage_msg
#define StackMeasurement_fields &StackMeasurement_msg
#define Response_fields &Response_msg

/* Maximum encoded size of messages (where known) */
#define CurrentTime_size                         11
#define DebugMessage_size                        76
#define Log_size                                 13
#define Request_size                             79
#define Response_size                            68
#define SetLight_size                            77
#define StackMeasurement_size                    66

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
